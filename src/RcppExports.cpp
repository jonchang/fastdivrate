// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// DR_statistic_C
NumericVector DR_statistic_C(List x);
RcppExport SEXP _fastdivrate_DR_statistic_C(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(DR_statistic_C(x));
    return rcpp_result_gen;
END_RCPP
}
// DR_statistic_time
NumericMatrix DR_statistic_time(List x, NumericVector sample_times);
RcppExport SEXP _fastdivrate_DR_statistic_time(SEXP xSEXP, SEXP sample_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample_times(sample_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(DR_statistic_time(x, sample_times));
    return rcpp_result_gen;
END_RCPP
}
// interval_node_statistic
NumericMatrix interval_node_statistic(List x, NumericVector sample_times);
RcppExport SEXP _fastdivrate_interval_node_statistic(SEXP xSEXP, SEXP sample_timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample_times(sample_timesSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_node_statistic(x, sample_times));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastdivrate_DR_statistic_C", (DL_FUNC) &_fastdivrate_DR_statistic_C, 1},
    {"_fastdivrate_DR_statistic_time", (DL_FUNC) &_fastdivrate_DR_statistic_time, 2},
    {"_fastdivrate_interval_node_statistic", (DL_FUNC) &_fastdivrate_interval_node_statistic, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastdivrate(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
